// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/davidchristie/identity/crypto (interfaces: Crypto)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCrypto is a mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// GeneratePasswordHash mocks base method
func (m *MockCrypto) GeneratePasswordHash(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePasswordHash", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePasswordHash indicates an expected call of GeneratePasswordHash
func (mr *MockCryptoMockRecorder) GeneratePasswordHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePasswordHash", reflect.TypeOf((*MockCrypto)(nil).GeneratePasswordHash), arg0)
}

// IsCorrectPassword mocks base method
func (m *MockCrypto) IsCorrectPassword(arg0 string, arg1 []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCorrectPassword", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCorrectPassword indicates an expected call of IsCorrectPassword
func (mr *MockCryptoMockRecorder) IsCorrectPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCorrectPassword", reflect.TypeOf((*MockCrypto)(nil).IsCorrectPassword), arg0, arg1)
}
