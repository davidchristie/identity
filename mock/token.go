// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/davidchristie/identity/token (interfaces: Token)

// Package mock is a generated GoMock package.
package mock

import (
	token "github.com/davidchristie/identity/token"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockToken is a mock of Token interface
type MockToken struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMockRecorder
}

// MockTokenMockRecorder is the mock recorder for MockToken
type MockTokenMockRecorder struct {
	mock *MockToken
}

// NewMockToken creates a new mock instance
func NewMockToken(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockToken) EXPECT() *MockTokenMockRecorder {
	return m.recorder
}

// NewAccessToken mocks base method
func (m *MockToken) NewAccessToken(arg0 *token.Content) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccessToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAccessToken indicates an expected call of NewAccessToken
func (mr *MockTokenMockRecorder) NewAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccessToken", reflect.TypeOf((*MockToken)(nil).NewAccessToken), arg0)
}

// ParseAccessToken mocks base method
func (m *MockToken) ParseAccessToken(arg0 string) (*token.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccessToken", arg0)
	ret0, _ := ret[0].(*token.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccessToken indicates an expected call of ParseAccessToken
func (mr *MockTokenMockRecorder) ParseAccessToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccessToken", reflect.TypeOf((*MockToken)(nil).ParseAccessToken), arg0)
}
